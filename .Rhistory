# library("sf")
# library("ggplot2")
# library("dplyr")
# library("shiny")
# library("plotly")
# #library(rnaturalearthdata)
# library("mapdata")
# base <- read_csv("ACLED-Western_Africa.csv",show_col_types = FALSE)
# #View(base)
# #glimpse(base)
#
# #conception du user interface
# shinyUI<-fluidPage(
#   titlePanel="Yannick",
#   theme="red",
#   sidebarLayout(
#     sidebarPanel(
#       selectInput(inputId ="pays",
#                   label ="selectionner le ou les pays ",
#                   choices=c(unique(base$pays)),
#                   selected =c(unique(base$pays))[sample(1:length(c(unique(base$pays))),1)],
#                   multiple = TRUE),
#
#       selectInput(inputId = "Evènements",label = "selectionner le ou les évènement(s)",
#                   choices=C(unique(base$type)),
#                   selected =c(unique(base$type))[sample(1:length(c(unique(base$type))),1)],
#                   multiple = TRUE),
#       selectInput(inputId = "Années",label = "selectionner le ou les Année(s)",
#                   choices=c(unique(base$annee)),
#                   selected =c(unique(base$annee))[sample(1:length(c(unique(base$annee))),1)],
#                   multiple = TRUE)
#     ),
#     mainPanel(plotlyOutput(
#       outputId = "map",
#       width = "100%",
#       height = "720px" ))# je vais essayer leafletOption
#   )
# )
#
#
#
#
#
#
#
# # Conception du serveur
# serveur<-function(input, output, session){
#   filtrage<-reactive({
#     A<-base %>% dplyr::filter(.,base$pays %in% input$pays,base$type %in% input$Evènements,base$annee %in% input$Années)
#    })
#   output$map<-renderPlotly({
#     gg<-ggplot() +
#       geom_polygon(data=ne_countries(type="countries",continent="Africa",country =input$pays, returnclass =c("sp","sf") ),aes(x=long,y=lat,group=group),
#                    fill = "lightgreen", color = "gray", alpha = 0.6) +
#       geom_point(data=filtrage(), x=length(base$longitude) , y=length(base$latitude))
#     theme_void() +
#       labs(title = "Carte de l'Afrique de l'Ouest", x = "", y = "") +
#       theme(legend.position = "bottom")
#     ggplotly(gg)
#   })
#
# }
#
#
# #filtrage de la base par le serveur en fonction des choix de l'utilsateur
# #glimpse(base)
#
#
# #rendu de l'application
# shinyApp(ui = shinyUI, server = serveur)
#1- CARTOGRAPHIE
# Charger les packages
library(leaflet)
library(sf)
# Charger la base de données
library(readxl)
data <- read_excel("Base_Partie1.xlsx")
# #partie 2: Rshiny
#
# library("readr")
# library("rnaturalearth")
# library("rnaturalearthdata")
# library("leaflet")
# library("sp")
# library("sf")
# library("ggplot2")
# library("dplyr")
# library("shiny")
# library("plotly")
# #library(rnaturalearthdata)
# library("mapdata")
# base <- read_csv("ACLED-Western_Africa.csv",show_col_types = FALSE)
# #View(base)
# #glimpse(base)
#
# #conception du user interface
# shinyUI<-fluidPage(
#   titlePanel="Yannick",
#   theme="red",
#   sidebarLayout(
#     sidebarPanel(
#       selectInput(inputId ="pays",
#                   label ="selectionner le ou les pays ",
#                   choices=c(unique(base$pays)),
#                   selected =c(unique(base$pays))[sample(1:length(c(unique(base$pays))),1)],
#                   multiple = TRUE),
#
#       selectInput(inputId = "Evènements",label = "selectionner le ou les évènement(s)",
#                   choices=C(unique(base$type)),
#                   selected =c(unique(base$type))[sample(1:length(c(unique(base$type))),1)],
#                   multiple = TRUE),
#       selectInput(inputId = "Années",label = "selectionner le ou les Année(s)",
#                   choices=c(unique(base$annee)),
#                   selected =c(unique(base$annee))[sample(1:length(c(unique(base$annee))),1)],
#                   multiple = TRUE)
#     ),
#     mainPanel(plotlyOutput(
#       outputId = "map",
#       width = "100%",
#       height = "720px" ))# je vais essayer leafletOption
#   )
# )
#
#
#
#
#
#
#
# # Conception du serveur
# serveur<-function(input, output, session){
#   filtrage<-reactive({
#     A<-base %>% dplyr::filter(.,base$pays %in% input$pays,base$type %in% input$Evènements,base$annee %in% input$Années)
#    })
#   output$map<-renderPlotly({
#     gg<-ggplot() +
#       geom_polygon(data=ne_countries(type="countries",continent="Africa",country =input$pays, returnclass =c("sp","sf") ),aes(x=long,y=lat,group=group),
#                    fill = "lightgreen", color = "gray", alpha = 0.6) +
#       geom_point(data=filtrage(), x=length(base$longitude) , y=length(base$latitude))
#     theme_void() +
#       labs(title = "Carte de l'Afrique de l'Ouest", x = "", y = "") +
#       theme(legend.position = "bottom")
#     ggplotly(gg)
#   })
#
# }
#
#
# #filtrage de la base par le serveur en fonction des choix de l'utilsateur
# #glimpse(base)
#
#
# #rendu de l'application
# shinyApp(ui = shinyUI, server = serveur)
#1- CARTOGRAPHIE
# Charger les packages
library(leaflet)
library(sf)
# Charger la base de données
library(readxl)
data <- read_excel("Base_Partie1.xlsx")
# #partie 2: Rshiny
#
# library("readr")
# library("rnaturalearth")
# library("rnaturalearthdata")
# library("leaflet")
# library("sp")
# library("sf")
# library("ggplot2")
# library("dplyr")
# library("shiny")
# library("plotly")
# #library(rnaturalearthdata)
# library("mapdata")
# base <- read_csv("ACLED-Western_Africa.csv",show_col_types = FALSE)
# #View(base)
# #glimpse(base)
#
# #conception du user interface
# shinyUI<-fluidPage(
#   titlePanel="Yannick",
#   theme="red",
#   sidebarLayout(
#     sidebarPanel(
#       selectInput(inputId ="pays",
#                   label ="selectionner le ou les pays ",
#                   choices=c(unique(base$pays)),
#                   selected =c(unique(base$pays))[sample(1:length(c(unique(base$pays))),1)],
#                   multiple = TRUE),
#
#       selectInput(inputId = "Evènements",label = "selectionner le ou les évènement(s)",
#                   choices=C(unique(base$type)),
#                   selected =c(unique(base$type))[sample(1:length(c(unique(base$type))),1)],
#                   multiple = TRUE),
#       selectInput(inputId = "Années",label = "selectionner le ou les Année(s)",
#                   choices=c(unique(base$annee)),
#                   selected =c(unique(base$annee))[sample(1:length(c(unique(base$annee))),1)],
#                   multiple = TRUE)
#     ),
#     mainPanel(plotlyOutput(
#       outputId = "map",
#       width = "100%",
#       height = "720px" ))# je vais essayer leafletOption
#   )
# )
#
#
#
#
#
#
#
# # Conception du serveur
# serveur<-function(input, output, session){
#   filtrage<-reactive({
#     A<-base %>% dplyr::filter(.,base$pays %in% input$pays,base$type %in% input$Evènements,base$annee %in% input$Années)
#    })
#   output$map<-renderPlotly({
#     gg<-ggplot() +
#       geom_polygon(data=ne_countries(type="countries",continent="Africa",country =input$pays, returnclass =c("sp","sf") ),aes(x=long,y=lat,group=group),
#                    fill = "lightgreen", color = "gray", alpha = 0.6) +
#       geom_point(data=filtrage(), x=length(base$longitude) , y=length(base$latitude))
#     theme_void() +
#       labs(title = "Carte de l'Afrique de l'Ouest", x = "", y = "") +
#       theme(legend.position = "bottom")
#     ggplotly(gg)
#   })
#
# }
#
#
# #filtrage de la base par le serveur en fonction des choix de l'utilsateur
# #glimpse(base)
#
#
# #rendu de l'application
# shinyApp(ui = shinyUI, server = serveur)
#1- CARTOGRAPHIE
# Charger les packages
library(leaflet)
library(sf)
# Charger la base de données
library(readxl)
data <- read_excel("Base_Partie1.xlsx")
install.packages(c("cartography","classInt","ggspatial","GISTools","leaflet","maptools","OpenStreetMap","osrm","popcircle","raster","RColorBrewer","rgdal","rgeos","sf","sp","tmaptools"),dependencies=TRUE)
install.packages(c("cartography", "classInt", "ggspatial", "GISTools", "leaflet", "maptools", "OpenStreetMap", "osrm", "popcircle", "raster", "RColorBrewer", "rgdal", "rgeos", "sf", "sp", "tmaptools"), dependencies = TRUE)
# Charger les packages
library(leaflet)
library(sf)
library(readxl)
data <- read_excel("Base_Partie1.xlsx")
data <- read_excel("Base_Partie 1.xlsx")
data_hommes <- subset(data, q23 == "Homme")
data_femmes <- subset(data, q23 == "Femme")
carte_sexe <- leaflet(data = data) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23)) %>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23))
points_sf <- st_as_sf(data, coords = c("gps_menlongitude", "gps_menlatitude"), crs = 4326)
carte_sexe <- leaflet(data = data) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23)) %>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23))
data_hommes <- subset(projet_map, q23 == "Homme")
projet_map <- st_as_sf(data, coords = c("gps_menlongitude", "gps_menlatitude"), crs = 4326)
data_hommes <- subset(projet_map, q23 == "Homme")
data_femmes <- subset(projet_map, q23 == "Femme")
carte_sexe <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(projet_map = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23)) %>%
addMarkers(projet_map = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23))
carte_sexe <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23)) %>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23))
carte_niveau_instruction <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = data_niveau_instruction, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25))
carte_niveau_instruction <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = projet_map$niveau_instruction, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25))
projet_map
carte_niveau_instruction <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = projet_map$q25, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25))
View(data)
aucun_niveau <- subset(projet_map, q25 == "Aucun niveau")
niveau_primaire <- subset(projet_map, q25 == "Niveau primaire")
niveau_secondaire <- subset(projet_map, q25 == "Niveau secondaire")
niveau_superieur <- subset(projet_map, q25 == "Niveau Superieur")
carte_niveau_instruction <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = aucun_niveau, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25))
addMarkers(data = niveau_primaire, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25))
carte_niveau_instruction <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = aucun_niveau, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25)) %>%
addMarkers(data = niveau_primaire, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25)) %>%
addMarkers(data = niveau_secondaire, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25)) %>%
addMarkers(data = niveau_superieur, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25))
carte_sexe
carte_niveau_instruction
carte_niveau_instruction <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = aucun_niveau, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-darkred.png")) %>%
addMarkers(data = niveau_primaire, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png")) %>%
addMarkers(data = niveau_secondaire, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-grey.png")) %>%
addMarkers(data = niveau_superieur, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Niveau d'instruction :", q25),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-orange.png"))
carte_sexe <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue-icon.png")) %>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-pink.png"))
# Afficher les cartes
carte_sexe
carte_niveau_instruction
# Afficher les cartes
carte_sexe
View(data)
View(data_femmes)
carte_sexe <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue-icon.png")) %>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-pink.png"))
carte_sexe
View(data_femmes)
View(carte_niveau_instruction)
View(aucun_niveau)
carte_sexe <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue-icon.png"))%>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-pink.png"))
View(carte_sexe)
View(carte_niveau_instruction)
View(carte_niveau_instruction)
View(data_femmes)
carte_sexe <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue-icon.png"))%>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-pink.png"))
# Afficher la carte sexe
carte_sexe
carte_sexe <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue-icon.png",iconWidth = 25, iconHeight = 41))%>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-pink.png",iconWidth = 25, iconHeight = 41))
# Afficher la carte sexe
carte_sexe
carte_sexe <- leaflet(data = projet_map) %>%
addTiles() %>%
addMarkers(data = data_hommes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue-icon.png",iconWidth = 25, iconHeight = 41))%>%
addMarkers(data = data_femmes, popup = ~paste("Identifiant de la PME :", key, "<br>",
"Sexe du dirigeant :", q23),
icon = leaflet::makeIcon(
iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-pink.png",iconWidth = 25, iconHeight = 41))
# Afficher la carte sexe
carte_sexe
carte_niveau_instruction
carte_niveau_instruction
# Afficher la carte sexe
carte_sexe
data<-read_xlsx("Base_Partie 2.xlsx")
data<-rename(data, destination = country_destination)
data$destination<-if_else(data$destination<0,NA,data$destination)
#Créer une nouvelle variable contenant des tranches d’âge de 5 ans en utilisant la variable “age”.
data<-data%>%arrange(age)
data$class_age<-cut(data$age,
breaks=seq(min(data$age),max(data$age)+1,by=5)
,right=F,
include.highest=T)
#Créer une nouvelle variable contenant le nombre d’entretiens réalisés par chaque agent recenseur.
data<-mutate(data,enumerator=as.factor(enumerator))
nb_mod<-table(data$enumerator)
data<-transform(data,nb_entretien=nb_mod[enumerator])
view(data)
data$nb_entretien<-apply(data$enumerator,1,)
data<-mutate(data,enumerator=as.factor(enumerator))
nb_mod<-table(data$enumerator)
data<-transform(data,nb_entretien=nb_mod[enumerator])
view(data)
data<-read_xlsx("Base_Partie 2.xlsx")
data<-rename(data, destination = country_destination)
data$destination<-if_else(data$destination<0,NA,data$destination)
#Créer une nouvelle variable contenant des tranches d’âge de 5 ans en utilisant la variable “age”.
data<-data%>%arrange(age)
data$class_age<-cut(data$age,
breaks=seq(min(data$age),max(data$age)+1,by=5)
,right=F,
include.highest=T)
#Créer une nouvelle variable contenant le nombre d’entretiens réalisés par chaque agent recenseur.
data<-mutate(data,enumerator=as.factor(enumerator))
nb_mod<-table(data$enumerator)
data<-transform(data,nb_entretien=nb_mod[enumerator])
view(data)
data$nb_entretien<-apply(data$enumerator,1,)
rm(list = ls())
data<-read_xlsx("Base_Partie 2.xlsx")
glimpse(data)
data <- data %>%
group_by(enumerator) %>%
mutate(num_interviews = n())
View(data)
data<-ungroup(data)
data
view(data)
data <- data %>%
mutate(treatment_group = sample(0:1, n(), replace = TRUE))
View(data)
data <- merge(data, district_data, by = "district", all.x = TRUE)
data <- merge(data, district_data, by = "district", all.x = TRUE)
data$interview_duration <- as.numeric(data$endtime - data$starttime)
View(data)
mean_duration_by_enumerator <- ddply(data, "enumerator", summarise, mean_duration = mean(interview_duration))
library(stringr)
library(plyr)
mean_duration_by_enumerator <- ddply(data, "enumerator", summarise, mean_duration = mean(interview_duration))
View(mean_duration_by_enumerator)
col_names <- names(data)
# Boucle pour renommer les colonnes avec le préfixe "endline_"
for (col in col_names) {
data <- data %>%
rename_with(.cols = col, .fn = ~str_c("endline_", .))
}
samples <- sample(2, nrow(iris),
replace = TRUE,
prob = c(0.8, 0.2))
samples <- sample(3, nrow(iris),
replace = TRUE,
prob = c(0.8, 0.2))
samples <- sample(3, nrow(iris),
replace = TRUE,
prob = c(0.8, 0.1,0.1))
samples <- sample(3, nrow(iris),
replace = TRUE,
prob = c(0.4, 0.5,0.1))
samples <- sample(2, nrow(iris),
replace = TRUE,
prob = c(0.8, 0.2))
iris
data(iris)
projet<-data.frame(read_xlsx("Base_Partie 1.xlsx"))
View(projet)
library(markdown)
install.packages("questionr")
install.packages("(GGally")
(GGally
install.packages("GGally")
install.packages("GGally")
install.packages("questionr")
install.packages("FactoMineR")
